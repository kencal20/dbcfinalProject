{"ast":null,"code":"var _jsxFileName = \"/home/kencal20/Documents/DBC/Node/dbcfinal_project/src/components/users/updateUser.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\n// Initialize react-modal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nexport default function UpdateUser() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [fname, setFname] = useState(\"\");\n  const [lname, setLname] = useState(\"\");\n  const [updateSuccess, setUpdateSuccess] = useState(false);\n  const [updateModalIsOpen, setUpdateModalIsOpen] = useState(false);\n  const updateData = () => {\n    // Add your logic for updating user data here\n    // This function should update the user data and set updateSuccess to true upon success.\n    // It should also close the modal when done.\n  };\n  useEffect(() => {\n    var _location$state;\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.userData) {\n      const {\n        fname,\n        lname,\n        email\n      } = location.state.userData;\n      setFname(fname || \"\");\n      setLname(lname || \"\");\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setUpdateModalIsOpen(true),\n      children: \"Open Update Modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: updateModalIsOpen,\n      onRequestClose: () => setUpdateModalIsOpen(false),\n      contentLabel: \"Update Account\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"First Name\",\n        value: fname,\n        onChange: e => setFname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Last Name\",\n        value: lname,\n        onChange: e => setLname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateData,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), updateSuccess && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Update successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(UpdateUser, \"JmXAEoOmffP+X3OiyU5PXeA1oxg=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = UpdateUser;\nvar _c;\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","Modal","jsxDEV","_jsxDEV","setAppElement","UpdateUser","_s","location","navigate","fname","setFname","lname","setLname","updateSuccess","setUpdateSuccess","updateModalIsOpen","setUpdateModalIsOpen","updateData","_location$state","state","userData","email","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onRequestClose","contentLabel","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/kencal20/Documents/DBC/Node/dbcfinal_project/src/components/users/updateUser.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\n// Initialize react-modal\nModal.setAppElement(\"#root\");\n\nexport default function UpdateUser() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [fname, setFname] = useState(\"\");\n  const [lname, setLname] = useState(\"\");\n  const [updateSuccess, setUpdateSuccess] = useState(false);\n  const [updateModalIsOpen, setUpdateModalIsOpen] = useState(false);\n\n  const updateData = () => {\n    // Add your logic for updating user data here\n    // This function should update the user data and set updateSuccess to true upon success.\n    // It should also close the modal when done.\n  };\n\n  useEffect(() => {\n    if (location.state?.userData) {\n      const { fname, lname, email } = location.state.userData;\n      setFname(fname || \"\");\n      setLname(lname || \"\");\n    }\n  }, [location]);\n\n  return (\n    <div>\n      <button onClick={() => setUpdateModalIsOpen(true)}>Open Update Modal</button>\n      <Modal\n        isOpen={updateModalIsOpen}\n        onRequestClose={() => setUpdateModalIsOpen(false)}\n        contentLabel=\"Update Account\"\n      >\n        <input\n          type=\"text\"\n          placeholder=\"First Name\"\n          value={fname}\n          onChange={(e) => setFname(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Last Name\"\n          value={lname}\n          onChange={(e) => setLname(e.target.value)}\n        />\n        <button onClick={updateData}>Update</button>\n        {updateSuccess && <p>Update successful!</p>}\n      </Modal>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}