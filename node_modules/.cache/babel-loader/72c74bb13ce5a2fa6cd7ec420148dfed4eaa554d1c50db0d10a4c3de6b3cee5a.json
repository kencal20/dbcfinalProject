{"ast":null,"code":"const handleSubmit = e => {\n  e.preventDefault();\n  if (userType === \"Company\" && secretKey !== \"6eybj;l,;kp-=0-0-090979865e5322457t87{\") {\n    alert(\"Invalid Company. Please enter the correct Secret Key.\");\n    return;\n  }\n  if (formData.password !== confirmPassword) {\n    alert(\"Password and Confirm Password do not match.\");\n    return;\n  }\n\n  // Check if the email already exists\n  fetch(\"http://localhost:5000/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      fname: formData.fname,\n      lname: formData.lname,\n      email: formData.email,\n      password: formData.password,\n      userType,\n      secretKey: userType === \"Company\" ? secretKey : undefined\n    })\n  }).then(res => {\n    if (!res.ok) {\n      throw new Error(\"Network response was not ok\");\n    }\n    return res.json();\n  }).then(data => {\n    if (data.message === \"Account created successfully\") {\n      setIsAccountCreated(true);\n      setAlertMessage(\"Account Creation Successful\");\n    } else if (data.error === \"Email already exists\") {\n      setIsAccountCreated(false);\n      setAlertMessage(\"Account already exists\");\n    }\n  }).catch(error => {\n    setIsAccountCreated(false);\n    setAlertMessage(\"Account Creation failure\");\n  });\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","userType","secretKey","alert","formData","password","confirmPassword","fetch","method","headers","Accept","body","JSON","stringify","fname","lname","email","undefined","then","res","ok","Error","json","data","message","setIsAccountCreated","setAlertMessage","error","catch"],"sources":["/home/kencal20/Documents/DBC/Node/dbcfinal_project/src/components/signup_component.jsx"],"sourcesContent":["const handleSubmit = (e) => {\n  e.preventDefault();\n\n  if (userType === \"Company\" && secretKey !== \"6eybj;l,;kp-=0-0-090979865e5322457t87{\") {\n    alert(\"Invalid Company. Please enter the correct Secret Key.\");\n    return;\n  }\n\n  if (formData.password !== confirmPassword) {\n    alert(\"Password and Confirm Password do not match.\");\n    return;\n  }\n\n  // Check if the email already exists\n  fetch(\"http://localhost:5000/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      fname: formData.fname,\n      lname: formData.lname,\n      email: formData.email,\n      password: formData.password,\n      userType,\n      secretKey: userType === \"Company\" ? secretKey : undefined,\n    }),\n  })\n    .then((res) => {\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return res.json();\n    })\n    .then((data) => {\n      if (data.message === \"Account created successfully\") {\n        setIsAccountCreated(true);\n        setAlertMessage(\"Account Creation Successful\");\n      } else if (data.error === \"Email already exists\") {\n        setIsAccountCreated(false);\n        setAlertMessage(\"Account already exists\");\n      }\n    })\n    .catch((error) => {\n      setIsAccountCreated(false);\n      setAlertMessage(\"Account Creation failure\");\n    });\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,CAAC,IAAK;EAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAIC,QAAQ,KAAK,SAAS,IAAIC,SAAS,KAAK,wCAAwC,EAAE;IACpFC,KAAK,CAAC,uDAAuD,CAAC;IAC9D;EACF;EAEA,IAAIC,QAAQ,CAACC,QAAQ,KAAKC,eAAe,EAAE;IACzCH,KAAK,CAAC,6CAA6C,CAAC;IACpD;EACF;;EAEA;EACAI,KAAK,CAAC,gCAAgC,EAAE;IACtCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAEV,QAAQ,CAACU,KAAK;MACrBC,KAAK,EAAEX,QAAQ,CAACW,KAAK;MACrBC,KAAK,EAAEZ,QAAQ,CAACY,KAAK;MACrBX,QAAQ,EAAED,QAAQ,CAACC,QAAQ;MAC3BJ,QAAQ;MACRC,SAAS,EAAED,QAAQ,KAAK,SAAS,GAAGC,SAAS,GAAGe;IAClD,CAAC;EACH,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAK;IACb,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,OAAO,KAAK,8BAA8B,EAAE;MACnDC,mBAAmB,CAAC,IAAI,CAAC;MACzBC,eAAe,CAAC,6BAA6B,CAAC;IAChD,CAAC,MAAM,IAAIH,IAAI,CAACI,KAAK,KAAK,sBAAsB,EAAE;MAChDF,mBAAmB,CAAC,KAAK,CAAC;MAC1BC,eAAe,CAAC,wBAAwB,CAAC;IAC3C;EACF,CAAC,CAAC,CACDE,KAAK,CAAED,KAAK,IAAK;IAChBF,mBAAmB,CAAC,KAAK,CAAC;IAC1BC,eAAe,CAAC,0BAA0B,CAAC;EAC7C,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}